type UpgradePKRangeResult = 
 record {
   nextKey: opt text;
   upgradeCanisterResults: vec record {
                                 text;
                                 InterCanisterActionResult;
                               };
 };
type Tree = 
 variant {
   leaf;
   node:
    record {
      Color;
      Tree;
      record {
        text;
        opt InterCanisterActionResult;
      };
      Tree;
    };
 };
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat32;
   key: nat32;
   sha256: opt vec nat8;
 };
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type StreamingCallback = func (StreamingCallbackToken) ->
                          (StreamingCallbackResponse) query;
type Response = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type Request = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type InterCanisterActionResult = 
 variant {
   err: text;
   ok;
 };
type IndexCanister = 
 service {
   autoScaleCollectionServiceCanister: (text) -> (text);
   createCollectionServiceCanisterByGroup: (text) -> (opt text);
   deleteCanistersByPK: (text) -> (opt CanisterCleanupStatusMap);
   getCanistersByPK: (text) -> (vec text) query;
   getCycles: () -> (nat) query;
   getHeapSize: () -> (nat) query;
   getMemorySize: () -> (nat) query;
   http_request: (Request) -> (Response) query;
   upgradeGroupCanistersInPKRange: (text, text, blob) ->
    (UpgradePKRangeResult);
 };
type HeaderField = 
 record {
   text;
   text;
 };
type Color = 
 variant {
   B;
   R;
 };
type CanisterCleanupStatusMap = 
 record {
   delete: Tree;
   stop: Tree;
   transfer: Tree;
 };
service : (text, text, text) -> IndexCanister
