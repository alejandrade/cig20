type TxReceipt = 
 variant {
   Err:
    variant {
      AmountTooSmall;
      BlockUsed;
      ErrorOperationStyle;
      ErrorTo;
      InsufficientAllowance;
      InsufficientBalance;
      LedgerTrap;
      Other: text;
      Unauthorized;
    };
   Ok: nat;
 };
type TokenInfo = 
 record {
   cycles: nat;
   deployTime: Time;
   feeTo: principal;
   historySize: nat;
   holderNumber: nat;
   metadata: Metadata;
 };
type Token = 
 service {
   allowance: (principal, principal) -> (nat) query;
   approve: (principal, nat) -> (TxReceipt);
   balanceOf: (principal) -> (nat) query;
   burn: (nat) -> (TxReceipt);
   decimals: () -> (nat8) query;
   getAllowanceSize: () -> (nat) query;
   getCycles: () -> (nat) query;
   getHeapSize: () -> (nat) query;
   getHolders: (nat, nat) -> (vec record {
                                    principal;
                                    nat;
                                  }) query;
   getMemorySize: () -> (nat) query;
   getMetadata: () -> (Metadata) query;
   getTokenFee: () -> (nat) query;
   getTokenInfo: () -> (TokenInfo) query;
   getUserApprovals: (principal) -> (vec record {
                                           principal;
                                           nat;
                                         }) query;
   historySize: () -> (nat) query;
   http_request: (Request) -> (Response) query;
   logo: () -> (text) query;
   mint: (principal, nat) -> (TxReceipt);
   name: () -> (text) query;
   setFee: (nat) -> () oneway;
   setFeeTo: (principal) -> () oneway;
   setLogo: (text) -> () oneway;
   setName: (text) -> () oneway;
   setOwner: (principal) -> () oneway;
   symbol: () -> (text) query;
   totalSupply: () -> (nat) query;
   transfer: (principal, nat) -> (TxReceipt);
   transferFrom: (principal, principal, nat) -> (TxReceipt);
 };
type Time = int;
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat32;
   key: nat32;
   sha256: opt vec nat8;
 };
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type StreamingCallback = func (StreamingCallbackToken) ->
                          (StreamingCallbackResponse) query;
type Response = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type Request = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type Metadata = 
 record {
   decimals: nat8;
   fee: nat;
   logo: text;
   name: text;
   owner: principal;
   symbol: text;
   totalSupply: nat;
 };
type HeaderField = 
 record {
   text;
   text;
 };
service : (text, text, text, nat8, nat, principal, nat, text, text) -> Token
